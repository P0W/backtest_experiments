name: Daily Data Refresh

on:
  schedule:
    # Runs at 00:00 UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write  # Required for pushing changes

jobs:
  refresh-data:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install and configure uv
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip sync pyproject.toml

      - name: Run data refresh script
        run: |
          echo "Starting data refresh..."
          uv run refresh_data.py
          echo "Data refresh completed"

      - name: Run code formatting and linting
        run: |
          echo "Running black formatter..."
          uv run black . --check --diff || uv run black .
          echo "Running isort..."
          uv run isort . --check-only --diff || uv run isort .
          echo "Running ruff linter..."
          uv run ruff check . --fix

      - name: Check for changes
        run: |
          echo "Files in data_parquet/:"
          ls -la data_parquet/ || echo "data_parquet/ directory not found"
          echo "Git status after data refresh and formatting:"
          git status

      - name: Commit and push if changes exist
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if ! git diff --staged --quiet; then
            DATA_CHANGED=$(git diff --staged --name-only | grep -E '^data_parquet/' || echo "")
            CODE_CHANGED=$(git diff --staged --name-only | grep -E '\.(py|toml|yml|yaml)$' || echo "")
            
            COMMIT_MSG="Automated daily update - $(date -u)"
            if [ -n "$DATA_CHANGED" ] && [ -n "$CODE_CHANGED" ]; then
              COMMIT_MSG="$COMMIT_MSG - Updated trading data and applied code formatting"
            elif [ -n "$DATA_CHANGED" ]; then
              COMMIT_MSG="$COMMIT_MSG - Updated trading data"
            elif [ -n "$CODE_CHANGED" ]; then
              COMMIT_MSG="$COMMIT_MSG - Applied code formatting"
            fi
            
            git commit -m "$COMMIT_MSG"
            git push origin main
          else
            echo "No changes to commit."
          fi